-- DROP FUNCTION insertPhone;

-- CREATE OR REPLACE FUNCTION insert_phone(
--   i_id OUT INT,
--   i_country_code CHAR(1),
--   i_area_code CHAR(3),
--   i_phone_number CHAR(7)
-- )
-- LANGUAGE plpgsql AS
-- $$
-- BEGIN
--   IF NOT EXISTS (SELECT i_country_code, i_area_code, i_phone_number 
--     FROM phones 
--     WHERE 
--       i_country_code = country_code AND
--       i_area_code = area_code AND
--       i_phone_number = phone_number
--     ) THEN
--       WITH input_rows(country_code, area_code, phone_number) AS (
--         VALUES (i_country_code, i_area_code, i_phone_number)
--       ),
--       ins AS (
--         INSERT INTO phones (country_code, area_code, phone_number)
--         SELECT * FROM input_rows
--         ON CONFLICT (country_code, area_code, phone_number) DO NOTHING
--         RETURNING id into i_id      
--       )
--       SELECT id   
--       FROM ins
--       UNION ALL
--       SELECT p.id
--       FROM input_rows
--       JOIN phones p USING (country_code, area_code, phone_number);
--   else
--     SELECT INTO i_id id FROM phones WHERE 
--       i_country_code = country_code AND
--       i_area_code = area_code AND
--       i_phone_number = phone_number;
-- end if;
-- END
-- $$;

-- DROP FUNCTION update_phone;

-- CREATE OR REPLACE FUNCTION update_phone(
--   id INT,
--   country_code CHAR(1) DEFAULT NULL,
--   area_code CHAR(3) DEFAULT NULL,
--   phone_number CHAR(7) DEFAULT NULL
-- ) RETURNS BOOLEAN
-- LANGUAGE plpgsql SECURITY DEFINER AS
-- $$
-- BEGIN
--   UPDATE phones
--   SET 
--     country_code = COALESCE(update_phone.country_code, phones.country_code), 
--     area_code = COALESCE(update_phone.area_code, phones.area_code), 
--     phone_number = COALESCE(update_phone.phone_number, phones.phone_number)
--   WHERE phones.id = update_phone.id;
--   RETURN FOUND;
--   EXCEPTION
--     WHEN unique_violation THEN
--         -- RAISE NOTICE 'Unique violation';
--         RETURN FALSE;
-- END
-- $$;

-- CREATE OR REPLACE FUNCTION delete_phone(id INT)
--   RETURNS BOOLEAN
--   LANGUAGE plpgsql SECURITY DEFINER AS
--   $$
--   BEGIN
--     DELETE FROM phones
--     WHERE phones.id = delete_phone.id;
--     RETURN FOUND;
--   END
--   $$;